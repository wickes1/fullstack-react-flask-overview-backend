{"version":3,"sources":["store/flux.js","store/appContext.js","components/topbar/Topbar.jsx","pages/home/Home.jsx","pages/login/Login.jsx","components/chart/Chart.jsx","pages/charts/Charts.jsx","components/buildingTab/BuildingTab.jsx","pages/overview/Overview.jsx","App.js","reportWebVitals.js","index.js"],"names":["getState","getStore","getActions","setStore","store","token","username","message","data","sqlQueryData","buildingOverview","buildingPageSize","actions","exampleFunction","changeColor","syncTokenFromSessionStorage","sessionStorage","getItem","console","log","undefined","logout","removeItem","login","password","a","headers","Headers","set","Buffer","from","toString","fetch","method","res","status","alert","json","setItem","error","getBuildingOverview","body","options","JSON","stringify","then","page_size","catch","e","getSQL","getMetrics","getMessage","process","BACKEND_URL","resp","Context","React","createContext","injectContext","PassedComponent","props","useState","state","updatedStore","setState","Object","assign","useEffect","page","per_page","Provider","value","Topbar","useContext","history","useHistory","Navbar","className","bg","variant","onSelect","eventKey","push","Container","Brand","href","Nav","defaultActiveKey","Item","Link","Button","onClick","to","Home","Login","setUsername","setPassword","htmlFor","type","onChange","target","Chart","title","xDataKey","yDataKey","grid","ResponsiveContainer","width","aspect","BarChart","height","CartesianGrid","stroke","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","Charts","BuildingTab","building","Card","border","Body","Title","PropertyName","Text","PrimaryPropertyType","Address","NumberofFloors","CouncilDistrictCode","YearBuilt","src","Date","now","alt","Overview","pageNumber","setPageNumber","Tab","Row","Col","Content","map","Pane","action","OSEBuildingID","ListGroup","previousLabel","nextLabel","pageCount","Math","ceil","onPageChange","selected","initialPage","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9b8b828.chunk.js","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\n  return {\n    store: {\n      token: '',\n      username: '',\n      message: null,\n      data: null,\n      sqlQueryData: null,\n      buildingOverview: null,\n      buildingPageSize: null,\n    },\n    actions: {\n      // Use getActions to call a function within a fuction\n      exampleFunction: () => {\n        getActions().changeColor(0, 'green')\n      },\n      syncTokenFromSessionStorage: () => {\n        const token = sessionStorage.getItem('token')\n        console.log('App loaded, syncing session storage token')\n        if (token && token !== '' && token !== undefined) setStore({ token: token })\n      },\n      logout: () => {\n        sessionStorage.removeItem('token')\n        setStore({ token: null })\n        console.log('Logged out')\n      },\n\n      login: async (username, password) => {\n        const headers = new Headers()\n        headers.set(\n          'Authorization',\n          'Basic ' + Buffer.from(username + ':' + password).toString('base64')\n        )\n\n        try {\n          const res = await fetch('/login', {\n            method: 'GET',\n            headers: headers,\n          })\n          if (res.status !== 200) {\n            alert('Login Error')\n            return false\n          }\n\n          const data = await res.json()\n          sessionStorage.setItem('token', data.token)\n          console.log('User logged in:', data.token)\n          setStore({ token: data.token, username: username })\n          return true\n        } catch (error) {\n          console.error('Login Error')\n        }\n      },\n      // page, per_page\n      // return res:buildings, page_size\n      getBuildingOverview: body => {\n        const store = getStore()\n        const options = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': store.token,\n          },\n          body: JSON.stringify(body),\n        }\n\n        fetch('/api/building_overview', options)\n          .then(res => res.json())\n          .then(data => {\n            setStore({ buildingOverview: data.res, buildingPageSize: data.page_size })\n          })\n          .catch(e => console.log(e))\n        console.log(store.buildingOverview)\n      },\n      getSQL: () => {\n        fetch('/api/sql_query', { method: 'GET' })\n          .then(res => res.json())\n          .then(data => {\n            setStore({ sqlQueryData: data.res })\n          })\n          .catch(e => console.log(e))\n      },\n      getMetrics: () => {\n        const store = getStore()\n        const options = {\n          method: 'GET',\n          headers: {\n            'x-access-token': store.token,\n          },\n        }\n        fetch('/api/metrics', options)\n          .then(res => res.json())\n          .then(data => {\n            setStore({ data: data.res })\n          })\n          .catch(e => console.log(e))\n      },\n\n      getMessage: () => {\n        // fetching data from the backend\n        fetch(process.env.BACKEND_URL + '/api/hello')\n          .then(resp => resp.json())\n          .then(data => setStore({ message: data.message }))\n          .catch(error => console.log('Error loading message from backend', error))\n      },\n      // changeColor: (index, color) => {\n      //   //get the store\n      //   const store = getStore()\n\n      //   //we have to loop the entire demo array to look for the respective index\n      //   //and change its color\n      //   const demo = store.demo.map((elm, i) => {\n      //     if (i === index) elm.background = color\n      //     return elm\n      //   })\n\n      //   //reset the global store\n      //   setStore({ demo: demo })\n      // },\n    },\n  }\n}\n\nexport default getState\n","import React, { useState, useEffect } from 'react'\nimport getState from './flux.js'\n\n// Don't change, here is where we initialize our context, by default it's just going to be null.\nexport const Context = React.createContext(null)\n\nconst injectContext = PassedComponent => {\n  const StoreWrapper = props => {\n    //this will be passed as the contenxt value\n    const [state, setState] = useState(\n      getState({\n        getStore: () => state.store,\n        getActions: () => state.actions,\n        setStore: updatedStore =>\n          setState({\n            store: Object.assign(state.store, updatedStore),\n            actions: { ...state.actions },\n          }),\n      })\n    )\n\n    useEffect(() => {\n      /**\n       * EDIT THIS!\n       * This function is the equivalent to \"window.onLoad\", it only runs once on the entire application lifetime\n       * you should do your ajax requests or fetch api requests here. Do not use setState() to save data in the\n       * store, instead use actions, like this:\n       **/\n      // state.actions.getMessage() // <---- calling this function from the flux.js actions\n      state.actions.syncTokenFromSessionStorage()\n      state.actions.getSQL()\n      state.actions.getBuildingOverview({ page: 1, per_page: 15 })\n    }, [])\n\n    // The initial value for the context is not null anymore, but the current state of this component,\n    // the context will now have a getStore, getActions and setStore functions available, because they were declared\n    // on the state of this component\n    return (\n      <Context.Provider value={state}>\n        <PassedComponent {...props} />\n      </Context.Provider>\n    )\n  }\n  return StoreWrapper\n}\n\nexport default injectContext\n","import React, { useContext } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Navbar, Container, Nav, Button } from 'react-bootstrap'\r\nimport { Context } from '../../store/appContext'\r\nimport './topbar.css'\r\n\r\nexport const Topbar = () => {\r\n  const { store, actions } = useContext(Context)\r\n  const history = useHistory()\r\n  const handleSelect = eventKey => history.push(eventKey)\r\n  return (\r\n    <>\r\n      <Navbar\r\n        className=\"justify-content-center\"\r\n        bg=\"light\"\r\n        variant=\"light\"\r\n        onSelect={handleSelect}\r\n      >\r\n        <Container>\r\n          <Navbar.Brand href=\"/\">Home</Navbar.Brand>\r\n          {store.token && store.token !== '' && store.token !== undefined ? (\r\n            <Nav variant=\"pills\" defaultActiveKey=\"/\" className=\"me-auto\">\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"/overview\">Overview</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link eventKey=\"/charts\">Charts</Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n          ) : null}\r\n\r\n          <Navbar className=\"justify-content-end\">\r\n            <div className=\"ml-auto\">\r\n              {!store.token ? (\r\n                <Link to=\"/login\">\r\n                  <Button variant=\"outline-primary\">Log in</Button>\r\n                </Link>\r\n              ) : (\r\n                <Button\r\n                  variant=\"outline-primary\"\r\n                  onClick={() => {\r\n                    history.push('/')\r\n                    actions.logout()\r\n                  }}\r\n                >\r\n                  Log out\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </Navbar>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Context } from '../../store/appContext'\r\n\r\nexport default function Home() {\r\n  const { store, actions } = useContext(Context)\r\n  return (\r\n    <div>\r\n      <h1>This is the homepage</h1>\r\n      <h2>\r\n        Username: Admin <br />\r\n        Password: 123456\r\n      </h2>\r\n      {/* <button onClick={() => actions.getBuildingOverview({ page: 1, per_page: 5 })}>\r\n        Retreive Data\r\n      </button>\r\n      <p>login before you click the button</p>\r\n      <div>\r\n        {store.buildingOverview ? (\r\n          <div>\r\n            <pre>{JSON.stringify(store.buildingOverview, null, 2)}</pre>\r\n            <pre>{JSON.stringify(store.buildingPagination, null, 2)}</pre>\r\n          </div>\r\n        ) : null}\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\nimport { Context } from '../../store/appContext'\r\nimport './login.css'\r\n\r\nexport default function Login() {\r\n  const { store, actions } = useContext(Context)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const history = useHistory()\r\n\r\n  const handleClick = () => {\r\n    actions.login(username, password).then(() => {\r\n      history.push('/')\r\n    })\r\n  }\r\n\r\n  if (store.token && store.token !== '' && store.token !== undefined) {\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <div className=\"loginPage\">\r\n      {store.token && store.token !== '' && store.token !== undefined ? (\r\n        // 'you are logged in with token:' + token\r\n        history.push('/')\r\n      ) : (\r\n        <div className=\"form\">\r\n          <h2 className=\"formTitle\">Sign In</h2>\r\n          <div className=\"formItem\">\r\n            <label htmlFor=\"name\">Username:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={e => {\r\n                setUsername(e.target.value)\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"formItem\">\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={e => {\r\n                setPassword(e.target.value)\r\n              }}\r\n            />\r\n          </div>\r\n          <button className=\"submitButton\" onClick={handleClick}>\r\n            Login\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import './chart.css'\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts'\r\n\r\nexport default function Chart({ title, data, xDataKey, yDataKey, grid }) {\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3 className=\"chartTitle\">{title}</h3>\r\n      <ResponsiveContainer width=\"100%\" aspect={4 / 1}>\r\n        <BarChart data={data} width={730} height={250}>\r\n          {grid && <CartesianGrid stroke=\"#e0dfdf\" strokeDasharray=\"5 5\" />}\r\n          <XAxis dataKey={xDataKey} stroke=\"#5550bd\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey={yDataKey} fill=\"#8884d8\" />\r\n          {/* <Line type=\"monotone\" dataKey={dataKey} stroke=\"#5550bd\" /> */}\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Chart from '../../components/chart/Chart'\r\nimport './charts.css'\r\nimport { Context } from './../../store/appContext'\r\n\r\nexport default function Charts() {\r\n  const { store, actions } = useContext(Context)\r\n  return (\r\n    <div className=\"charts\">\r\n      <Chart\r\n        title=\"Avg. EUI By Property Type\"\r\n        grid\r\n        data={store.sqlQueryData}\r\n        xDataKey=\"type\"\r\n        yDataKey=\"avg(eui)\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport './buildingTab.css'\r\n\r\nexport default function BuildingTab({ building }) {\r\n  return (\r\n    <div className=\"buildingTab\">\r\n      <Card border=\"light\">\r\n        <Card.Body>\r\n          <Card.Title>{building.PropertyName}</Card.Title>\r\n        </Card.Body>\r\n        <Card.Text>\r\n          <ul className=\"list\">\r\n            <li>{building.PrimaryPropertyType}</li>\r\n            <li>{building.Address}</li>\r\n            <li>{'# of floor: ' + building.NumberofFloors}</li>\r\n            <li>{'District: ' + building.CouncilDistrictCode}</li>\r\n            <li>{'Built in ' + building.YearBuilt}</li>\r\n            <li>\r\n              <img\r\n                src={'https://picsum.photos/600/300/?random&' + Date.now()}\r\n                alt=\"lorem picture\"\r\n              />\r\n            </li>\r\n          </ul>\r\n        </Card.Text>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Tab, Row, Col, ListGroup } from 'react-bootstrap'\r\nimport BuildingTab from '../../components/buildingTab/BuildingTab'\r\nimport { Context } from '../../store/appContext'\r\nimport ReactPaginate from 'react-paginate'\r\nimport './overview.css'\r\n\r\nexport default function Overview() {\r\n  const { store, actions } = useContext(Context)\r\n  const [pageNumber, setPageNumber] = useState(0)\r\n  const handleSelect = eventKey => {}\r\n  const changePage = ({ selected }) => {\r\n    setPageNumber(selected)\r\n  }\r\n  useEffect(() => {\r\n    actions.getBuildingOverview({ page: pageNumber + 1, per_page: 15 })\r\n    return () => {}\r\n  }, [pageNumber])\r\n  return store.buildingOverview ? (\r\n    <div className=\"overview\">\r\n      <Tab.Container defaultActiveKey={0} onSelect={handleSelect}>\r\n        <Row>\r\n          <Col className=\"leftCard\">\r\n            <Tab.Content>\r\n              {store.buildingOverview.map(building => {\r\n                return (\r\n                  <Tab.Pane action eventKey={building.OSEBuildingID}>\r\n                    <BuildingTab building={building} key={building.OSEBuildingID} />\r\n                  </Tab.Pane>\r\n                )\r\n              })}\r\n            </Tab.Content>\r\n          </Col>\r\n\r\n          <Col className=\"rightCard\">\r\n            <ListGroup>\r\n              {store.buildingOverview.map(building => {\r\n                return (\r\n                  <ListGroup.Item action eventKey={building.OSEBuildingID}>\r\n                    {building.PropertyName}\r\n                  </ListGroup.Item>\r\n                )\r\n              })}\r\n\r\n              <ReactPaginate\r\n                previousLabel=\"Previous\"\r\n                nextLabel=\"Next\"\r\n                pageCount={Math.ceil(store.buildingPageSize / 15)}\r\n                onPageChange={changePage}\r\n                initialPage={0}\r\n                containerClassName=\"paginationButtons\"\r\n                previousLinkClassName=\"previousButton link\"\r\n                nextLinkClassName=\"nextButton link\"\r\n                disabledClassName=\"paginationDisabled\"\r\n                activeClassName=\"paginationActive\"\r\n              />\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container>\r\n    </div>\r\n  ) : null\r\n}\r\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Topbar } from './components/topbar/Topbar'\nimport './app.css'\nimport Home from './pages/home/Home'\nimport Login from './pages/login/Login'\nimport injectContext from './store/appContext'\nimport Charts from './pages/charts/Charts'\nimport Overview from './pages/overview/Overview'\nfunction App() {\n  return (\n    <Router>\n      <Topbar />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/overview\">\n          <Overview />\n        </Route>\n        <Route exact path=\"/charts\">\n          <Charts />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default injectContext(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}